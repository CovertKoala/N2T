// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction decoder:
        // a  =instruction[12] Use M, not A
        // c1 =instruction[11] zx
        // c2 =instruction[10] nx
        // c3 =instruction[9] zy
        // c4 =instruction[8] ny
        // c5 =instruction[7] f
        // c6 =instruction[6] no
        // d1 =instruction[5] A Register
        // d2 =instruction[4] D Register
        // d3 =instruction[3] M-Memory
        // j1 =instruction[2] LT
        // j2 =instruction[1] EQ
        // j3 =instruction[0] GT
        
        // C-Command Validation
            And(a=instruction[13], b=instruction[14],
                out=INSTPBIT);
            And(a=INSTPBIT,b=instruction[15],
                out=ISCCMD);

        // A Register Load Selection
        // input: d1 and not(MSB)
        // output: LOADAREG
            Not(in=instruction[15],out=ISACMD);
            And(a=ISCCMD, b=instruction[5],
                out=CSTOA);
            Or(a=ISACMD, b=CSTOA,
                out=LOADAREG);
                
        // D Register Load Selection
        // input: d2 and C-Command Validation
        // output: LOADDREG
            And(a=ISCCMD, b=instruction[4],
                out=LOADDREG);
                
        // A/M ALU Input Selection
        // input: a bit
        // output: AMSEL
            And(a=ISCCMD, b=instruction[12],
                out=AMSEL);
        
        // JMP Logic - to JMP or not to JMP
        // input: j1, j2, j3, ISALUNEG, ISALU0
        // output: LOADJMP
            And(a=instruction[2], b=ISALUNEG, 
                out=ISJ1);
            And(a=instruction[1], b=ISALU0, 
                out=ISJ2);
            Or(a=ISALUNEG, b=ISALU0, 
                out=ALULE0);
            Not(in=ALULE0, out=ISALUPOS);
            And(a=instruction[0], b=ISALUPOS, 
                out=ISJ3);
            Or(a=ISJ1, b=ISJ2, 
                out=ISJ12);
            Or(a=ISJ12, b=ISJ3, 
                out=JMPBit);
            And(a=ISCCMD, b=JMPBit,
                out=LOADJMP);

    // ALU
    // CPU out: outM
        ALU(
            //IN
            x=DREGOUT,
            y=AMMUXOUT,
            zx=instruction[11],
            nx=instruction[10],
            zy=instruction[9],
            ny=instruction[8],
            f=instruction[7],
            no=instruction[6],
            
            //OUT
            out=ALUOUT,
            out=outM, // Two outs for clarity
            zr=ISALU0,
            ng=ISALUNEG);

    // ALU/Instruction Mux
        Mux16(a=instruction, b=ALUOUT, sel=ISCCMD,
            out=AREGIN);

    // A Register
    // CPU out: addressM
        ARegister(in=AREGIN, load=LOADAREG,
            out=AREGOUT,
            out[0..14]=addressM);

    // A/M Mux
        Mux16(a=AREGOUT, b=inM, sel=AMSEL,
            out=AMMUXOUT);

    // D Register
        DRegister(in=ALUOUT, load=LOADDREG,
            out=DREGOUT);

    // PC - JMP provides load signal
    // CPU out: pc
        PC(in=AREGOUT, load=LOADJMP, inc=true, reset=reset,
            out[0..14]=pc);

    // Memory Write Bit
    // CPU out: writeM
        And(a=ISCCMD, b=instruction[3],
            out=writeM);
}